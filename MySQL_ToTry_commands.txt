CREATE TABLE boat(
  bid VARCHAR(3) NOT NULL,
  bname VARCHAR(45) DEFAULT NULL,
  color VARCHAR(45) DEFAULT NULL,
  PRIMARY KEY (bid)
);

SHOW DATABASES;
SHOW TABLES;

USE [dbname];

CREATE TABLE boat(
  bid VARCHAR(3) NOT NULL,
  bname VARCHAR(45) DEFAULT NULL,
  color VARCHAR(45) DEFAULT NULL,
  PRIMARY KEY (bid)
);

CREATE TABLE sailor (
  sid VARCHAR(2) NOT NULL,
  sname VARCHAR(45) DEFAULT NULL,
  rating INT(11) DEFAULT NULL,
  age DOUBLE DEFAULT NULL,
  PRIMARY KEY (sid)
);

CREATE TABLE reserve (
  sid VARCHAR(2) NOT NULL,
  bid VARCHAR(3) NOT NULL,
  day DATE DEFAULT NULL
);


ALTER TABLE reserve ADD confirm boolean;
desc tablename;
ALTER TABLE reserve drop confirm;

ALTER TABLE reserve ADD CONSTRAINT fk_sid FOREIGN KEY (sid) REFERENCES sailor(sid);
ALTER TABLE reserve ADD CONSTRAINT fk_bid FOREIGN KEY (bid) REFERENCES boat(bid);
ALTER TABLE reserve ADD CONSTRAINT pk_reserve PRIMARY KEY (sid, bid);
ALTER TABLE reserve ADD CONSTRAINT uc_combined UNIQUE (sid, bid);
ALTER TABLE sailor ADD PRIMARY KEY (sid);

INSERT INTO sailor VALUES 
('22','Dustin',7,45),
('29','Brutus',1,33),
('31','Lubber',8,55.5),
('32','Andy',8,25.5),
('58','Rusty',10,35),
('64','Horatio',7,35),
('71','Zorba',10,16),
('74','Horatio',9,35),
('85','Art',3,25.5),
('95','Bob',3,63.5);


INSERT INTO boat VALUES 
('101','Interlake','Blue'),
('102','Interlake','Red'),
('103','Clipper','Green'),
('104','Marine','Red');


INSERT INTO reserve VALUES 
('22','101','2010-10-14'),
('22','102','2010-10-14'),
('22','103','2010-08-14'),
('22','104','2010-07-14'),
('31','102','2011-10-14'),
('31','103','2011-06-14'),
('31','104','2011-12-14'),
('64','101','2009-05-14'),
('64','102','2009-08-14'),
('74','103','2009-08-14');


INSERT INTO reserve (sid, bid, day) VALUES (21, 105, '2009-08-14');

SELECT S.sname, S.age
FROM sailor S;


SELECT DISTINCT S.sname, S.age
FROM sailor S;

SELECT S.sname 
FROM sailor S, reserve R
WHERE S.sid = R.sid AND R.bid = 103;

SELECT R.sid
FROM boat B, reserve R
WHERE R.bid = B.bid AND B.color = Red;


SELECT S.sname
FROM sailor S, boat B, reserve R
WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'Red';

SELECT B.color 
FROM sailor S, reserve R, boat B
WHERE S.sname = 'Lubber' AND S.sid = R.sid AND R.bid = B.bid;

SELECT S.sname
FROM sailor S, reserve R
WHERE S.sid = R.sid;

SELECT DISTINCT S.sname
FROM sailor S, reserve R
WHERE S.sid = R.sid;

SELECT S.sid
FROM sailor S, reserve R
WHERE S.sid = R.sid;


SELECT S.sname, S.age, S.age-1 AS age1, 2*S.age AS age2
FROM sailor S
WHERE S.sname LIKE 'B%';

SELECT S.sname, S.age, S.age-1 AS age1, 2*S.age AS age2
FROM sailor S
WHERE S.sname LIKE 'B_';

SELECT S.sname, S.age, S.age-1 AS age1, 2*S.age AS age2
FROM sailor S
WHERE S.sname LIKE 'B__';

SELECT S.sname, S.age, S.age-1 AS age1, 2*S.age AS age2
FROM sailor S
WHERE S.sname LIKE '%b';

SELECT S.sname 
FROM sailor S, boat B, reserve R
WHERE S.sid = R.sid AND R.bid = B.bid AND (B.color = 'Red' OR B.color = 'Green');

(SELECT S.sname 
FROM sailor S, boat B, reserve R
WHERE s.sid = R.sid AND R.bid = B.bid AND B.color = 'Red')
UNION
(SELECT S.sname 
FROM sailor S, boat B, reserve R
WHERE s.sid = R.sid AND R.bid = B.bid AND B.color = 'Green');


SELECT S.sname 
FROM sailor S, boat B, reserve R
WHERE s.sid = R.sid AND R.bid = B.bid AND B.color = 'Red'
AND S.sid IN
(SELECT S.sid 
FROM sailor S, boat B, reserve R
WHERE s.sid = R.sid AND R.bid = B.bid AND B.color = 'Green');

SELECT S.sname 
FROM sailor S, boat B, reserve R
WHERE s.sid = R.sid AND R.bid = B.bid AND B.color = 'Green'
AND S.sid NOT IN
(SELECT S.sid 
FROM sailor S, boat B, reserve R
WHERE s.sid = R.sid AND R.bid = B.bid AND B.color = 'Red');

SELECT COUNT(*)
FROM sailor S;

SELECT COUNT(DISTINCT S.sname) 
FROM sailor S;

SELECT SUM(S.age) 
FROM sailor S
WHERE S.rating = 10;

SELECT AVG(S.age) 
FROM sailor S
WHERE S.rating = 10;

SELECT S.sname, MAX(S.age)
FROM sailor S;


SELECT S.sname, S.age
FROM sailor S
WHERE S.age = 
(SELECT MAX(S2.age)
 FROM sailor S2);


SELECT sname 
FROM sailor 
WHERE age BETWEEN 25 AND 35;

SELECT * 
FROM sailor
WHERE sname NOT BETWEEN 'Hansen' 
AND 'Perttersen';

SELECT * 
FROM sailor
WHERE sname LIKE 'A%';


============
BANKING
============

As root:
CREATE DATABASE banking;
GRANT ALL PRIVILEGES ON banking.* TO 'wichadak'@'localhost';
FLUSH PRIVILEGES;

As wichadak:
USE banking;
SOURCE banking.sql;

LOAD DATA LOCAL INFILE 'Banking/branch.csv'
INTO TABLE branch
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/customer.csv'
INTO TABLE customer
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/account.csv'
INTO TABLE account
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/loan.csv'
INTO TABLE loan
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/depositor.csv'
INTO TABLE depositor
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/borrower.csv'
INTO TABLE borrower
FIELDS TERMINATED BY ',';

SELECT A.account_number
FROM account A, branch B
WHERE A.branch_name = B.branch_name AND 
SELECT COUNT(*)
FROM sailor S;

SELECT COUNT(DISTINCT S.sname) 
FROM sailor S;

SELECT SUM(S.age) 
FROM sailor S
WHERE S.rating = 10;

SELECT AVG(S.age) 
FROM sailor S
WHERE S.rating = 10;

SELECT S.sname, MAX(S.age)
FROM sailor S;


SELECT S.sname, S.age
FROM sailor S
WHERE S.age = 
(SELECT MAX(S2.age)
 FROM sailor S2);


SELECT sname 
FROM sailor 
WHERE age BETWEEN 25 AND 35;

============
BANKING
============

As root:
CREATE DATABASE banking;
GRANT ALL PRIVILEGES ON banking.* TO 'wichadak'@'localhost';
FLUSH PRIVILEGES;

As wichadak:
USE banking;
SOURCE banking.sql;

LOAD DATA LOCAL INFILE 'Banking/branch.csv'
INTO TABLE branch
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/customer.csv'
INTO TABLE customer
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/account.csv'
INTO TABLE account
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/loan.csv'
INTO TABLE loan
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/depositor.csv'
INTO TABLE depositor
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'Banking/borrower.csv'
INTO TABLE borrower
FIELDS TERMINATED BY ',';

SELECT A.account_number
FROM account A, branch B
WHERE A.branch_name = B.branch_name AND 
B.branch_city = 'Riverside';

or

SELECT account_number 
FROM account  
WHERE branch_name IN
    (SELECT branch_name 
    FROM branch
    WHERE branch_city = 'Riverside');

SELECT account_number
  FROM account A
  WHERE 'Riverside' IN
	(SELECT branch_city
        FROM branch B
        WHERE A.branch_name = B.branch_name);

SELECT account_number
FROM account
WHERE branch_name IN ('A','B');

SELECT A.account_number
FROM account A
WHERE EXISTS (SELECT *
    FROM branch B
    WHERE B.branch_city = 'Riverside'
    AND B.branch_name = A.branch_name);


SELECT A.account_number
FROM account A 
WHERE NOT EXISTS (SELECT * 
    FROM branch B
    WHERE B.branch_city = 'Riverside'
    AND B.branch_name = A.branch_name);

SELECT account
FROM account 
WHERE balance <= ALL(SELECT
    balance from account);


SELECT balance
FROM account 
WHERE balance <= ALL(SELECT
    balance from account);

SELECT balance
FROM account 
WHERE branch_name = ANY(SELECT B.branch_name
    FROM branch B
    WHERE branch_city = 'Riverside');


SELECT balance
FROM account
WHERE branch_name = SOME(SELECT B.branch_name
    FROM branch B
    WHERE branch_city = 'Riverside');


SELECT SUM(A.balance) AS total_amount
FROM account A, branch B
WHERE B.branch_city = 'Riverside' AND
    A.branch_name = B.branch_name;

SELECT COUNT(*) 
FROM account;

SELECT branch_name, SUM(balance)
FROM account
GROUP BY branch_name;


SELECT account_number, branch_name, SUM(balance)
FROM account
GROUP BY branch_name;
    

SELECT C.customer_name, SUM(A.balance)
FROM customer C, account A, depositor D
WHERE C.customer_name = D.customer_name AND
  D.account_number = A.account_number
GROUP BY C.customer_name;


SELECT C.customer_name, SUM(A.balance) as sum_balance
FROM customer C, account A, depositor D
WHERE C.customer_name = D.customer_name AND
  D.account_number = A.account_number
GROUP BY C.customer_name
HAVING sum_balance > 100;


SELECT C.customer_name, SUM(A.balance) as sum_balance
FROM customer C, account A, depositor D
WHERE C.customer_name = D.customer_name AND
  D.account_number = A.account_number
GROUP BY customer_name
HAVING count(D.customer_name) > 1;

SELECT C.customer_name, SUM(A.balance) as sum_balance
FROM customer C, account A, depositor D
WHERE C.customer_name = D.customer_name AND
  D.account_number = A.account_number
GROUP BY customer_name
HAVING count(*) > 1;

SELECT C.customer_name, SUM(A.balance) as sum_balance
FROM customer C, account A, depositor D
WHERE C.customer_name = D.customer_name AND
  D.account_number = A.account_number
GROUP BY customer_name
HAVING count(D.customer_name) > 1
ORDER BY sum_balance DESC;

INSERT INTO account (account_number, branch_name, balance) VALUES (‘7', ‘X', '222');


SELECT * 
FROM account A JOIN branch B 
ON A.branch_name = B.branch_name;

SELECT * 
FROM account A, branch B
WHERE A.branch_name = B.branch_name;

SELECT *
FROM account NATURAL JOIN branch;


SELECT *
FROM account A LEFT OUTER JOIN branch B
ON A.branch_name = B.branch_name;

SELECT *
FROM account A LEFT JOIN branch B
ON A.branch_name = B.branch_name;

SELECT *
FROM account A RIGHT JOIN branch B
ON A.branch_name = B.branch_name;


SELECT *
FROM account A LEFT JOIN branch B
ON A.branch_name = B.branch_name
UNION
SELECT *
FROM account A RIGHT JOIN branch B
ON A.branch_name = B.branch_name;

mysqldump banking -u wichadak -p > banking_dumped.sql

================================
ORDERSYSTEM (Exercise)
================================
As root
=======
CREATE DATABASE ordersystem;
GRANT ALL PRIVILEGES ON ordersystem.* TO 'wichadak'@'localhost';  
FLUSH PRIVILEGES;

GRANT ALTER ON ordersystem3.* to 'wichadak3'@'localhost';

As wichadak
===========
USE ordersystem3;

ALTER DATABASE ordersystem3 CHARACTER SET utf8 COLLATE utf8_general_ci;

CREATE TABLE PRODUCT(
PRODUCT_ID INTEGER NOT NULL, 
PRODUCT_DESCRIPTION VARCHAR(50), 
PRODUCT_FINISH ENUM('Cherry', 'Natural Ash',
'White Ash', 'Red Oak', 'Natural
Oak', 'Walnut'), 
STANDARD_PRICE DECIMAL(6,2),
CONSTRAINT PRODUCT_PK PRIMARY KEY(PRODUCT_ID));

CREATE TABLE CUSTOMER(
CUSTOMER_ID INTEGER(11) NOT NULL, 
CUSTOMER_NAME VARCHAR(25) NOT NULL, 
CUSTOMER_ADDRESS VARCHAR(30),
CITY VARCHAR(20),
POSTAL_CODE VARCHAR(9),
CONSTRAINT CUSTOMER_PK PRIMARY KEY (CUSTOMER_ID));

ALTER TABLE customer CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;

CREATE TABLE ORDERT(
    ORDER_ID INTEGER(11) NOT NULL,
    ORDER_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    CUSTOMER_ID INTEGER(11),
    CONSTRAINT ORDER_PK PRIMARY KEY(ORDER_ID,CUSTOMER_ID),
    CONSTRAINT ORDER_FK FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID));

CREATE TABLE ORDER_LINE(
    ORDER_ID INTEGER(11) NOT NULL, 
    PRODUCT_ID INTEGER(11) NOT NULL, 
    ORDERED_QUANTITY INTEGER(11),
    CONSTRAINT ORDER_LINE_PK PRIMARY KEY (ORDER_ID, PRODUCT_ID),
    CONSTRAINT ORDER_LINE_FK1 FOREIGN KEY (ORDER_ID) REFERENCES ORDERT(ORDER_ID),
    CONSTRAINT ORDER_LINE_FK2 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID));

INSERT INTO customer (CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_ADDRESS, CITY, POSTAL_CODE) VALUES ('10001', 'จอน', 'ปทุมวัน','กรุงเทพ', '10330');
INSERT INTO product (PRODUCT_ID, PRODUCT_DESCRIPTION, PRODUCT_FINISH, STANDARD_PRICE) VALUES ('0001', 'Table', 'Red Oak', '2000'), ('0002', 'Chair', 'Walnut', '5000');
INSERT INTO ordert (ORDER_ID, CUSTOMER_ID) VALUES ('001', '10001');
INSERT INTO order_line (ORDER_ID, PRODUCT_ID, ORDERED_QUANTITY) VALUES ('001', '0001', '1'), ('001', '0002', '5');
INSERT INTO ordert (ORDER_ID, CUSTOMER_ID) VALUES ('002', '10001');
INSERT INTO order_line (ORDER_ID, PRODUCT_ID, ORDERED_QUANTITY) VALUES ('002', '0001', '10');

SELECT * FROM customer NATURAL JOIN ordert NATURAL JOIN order_line; 

DELETE FROM customer WHERE CUSTOMER_ID ='10001'; # error due to referential integrity constraints

LOAD DATA LOCAL INFILE 'ordersystem/customer.csv'
INTO TABLE customer
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'ordersystem/ordert.csv'
INTO TABLE ordert
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'ordersystem/product.csv'
INTO TABLE product
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE 'ordersystem/order_line.csv'
INTO TABLE order_line
FIELDS TERMINATED BY ',';



utf8_general_ci

=================
Backup
=================

CREATE TABLE reserve (
  sid VARCHAR(2) NOT NULL,
  bid VARCHAR(3) NOT NULL,
  day DATE DEFAULT NULL,
  PRIMARY KEY (sid,bid),
  CONSTRAINT bid FOREIGN KEY (bid) REFERENCES boat(bid) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT sid FOREIGN KEY (sid) REFERENCES sailor(sid) ON DELETE NO ACTION ON UPDATE NO ACTION
);
